services:
  # Main Next.js application (production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: contextlayer-app-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/contextlayer
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
    depends_on:
      - db
      - redis
    networks:
      - contextlayer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (production)
  db:
    image: postgres:15-alpine
    container_name: contextlayer-db-prod
    environment:
      - POSTGRES_DB=contextlayer
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - contextlayer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d contextlayer"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Don't expose port in production (only internal access)

  # Redis for caching and session management (production)
  redis:
    image: redis:7-alpine
    container_name: contextlayer-redis-prod
    volumes:
      - redis_data:/data
    networks:
      - contextlayer-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Don't expose port in production (only internal access)

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: contextlayer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - contextlayer-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  contextlayer-network:
    driver: bridge
