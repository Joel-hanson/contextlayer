// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Authentication and User Management Models
model User {
    id            String    @id @default(uuid()) @db.Uuid
    username      String?   @unique
    email         String    @unique
    emailVerified DateTime?
    name          String?
    image         String?
    password      String? // Hashed password for username/password login
    role          UserRole  @default(USER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    accounts Account[]
    sessions Session[]
    bridges  Bridge[] // User-owned bridges
    settings UserSettings?

    @@map("users")
}

model Account {
    id                String  @id @default(uuid()) @db.Uuid
    userId            String  @db.Uuid
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(uuid()) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

// User Settings Model
model UserSettings {
    id                  String  @id @default(uuid()) @db.Uuid
    userId              String  @unique @db.Uuid
    displayName         String?
    organization        String?
    timezone            String  @default("UTC")
    theme               String  @default("system") // light, dark, system
    autoSaveBridges     Boolean @default(true)
    showAdvancedOptions Boolean @default(false)
    defaultAuthType     String  @default("none")

    // Bridge defaults
    defaultTimeout       Int     @default(30000)
    defaultRetryAttempts Int     @default(3)
    enableCaching        Boolean @default(true)
    cacheDuration        Int     @default(300)
    enableRateLimiting   Boolean @default(false)
    requestsPerMinute    Int     @default(100)

    // Notifications
    emailNotifications  Boolean @default(true)
    bridgeFailureAlerts Boolean @default(true)
    weeklyReports       Boolean @default(false)
    maintenanceUpdates  Boolean @default(true)
    webhookUrl          String?
    slackWebhookUrl     String?

    // API Keys
    enableApiAccess   Boolean @default(false)
    allowPublicAccess Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_settings")
}

enum UserRole {
    USER
    ADMIN
    MODERATOR
}

enum AuthenticationType {
    none
    bearer
    apikey
    basic
}

enum HttpMethod {
    GET
    POST
    PUT
    DELETE
    PATCH
}

enum ParameterType {
    string
    number
    boolean
    object
    array
}

enum BridgeStatus {
    active
    inactive
    error
}

model Bridge {
    id             String             @id @default(uuid()) @db.Uuid
    userId         String             @db.Uuid // Associate bridges with users
    name           String
    slug           String // UUID-based identifier for routing
    description    String?
    baseUrl        String
    headers        Json? // Store as JSONB for custom headers
    authType       AuthenticationType @default(none)
    authToken      String?
    authApiKey     String?
    authUsername   String?
    authPassword   String?
    authHeaderName String?
    enabled        Boolean            @default(false)
    status         BridgeStatus       @default(inactive)

    // Path-based routing configuration
    routingType  String  @default("path") // 'path', 'subdomain', 'websocket'
    customDomain String?
    pathPrefix   String?

    // Access control
    isPublic       Boolean @default(true)
    allowedOrigins Json? // Array of allowed origins as JSONB
    authRequired   Boolean @default(false)
    apiKey         String?

    // Performance settings stored as JSONB
    performanceConfig Json? // Rate limiting, caching, timeout settings

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    endpoints ApiEndpoint[]
    logs      BridgeLog[]
    requests  ApiRequest[]

    @@map("bridges")
}

model ApiEndpoint {
    id             String     @id @default(uuid()) @db.Uuid
    bridgeId       String     @db.Uuid
    name           String
    method         HttpMethod
    path           String
    description    String?
    parameters     Json? // Store parameters schema as JSONB
    requestBody    Json? // Store request body schema as JSONB
    responseSchema Json? // Store response schema as JSONB
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt

    // Relations
    bridge   Bridge       @relation(fields: [bridgeId], references: [id], onDelete: Cascade)
    requests ApiRequest[]

    @@map("api_endpoints")
}

model BridgeLog {
    id        String   @id @default(uuid()) @db.Uuid
    bridgeId  String   @db.Uuid
    level     String // info, warn, error, debug
    message   String
    metadata  Json? // Additional structured data
    createdAt DateTime @default(now())

    // Relations
    bridge Bridge @relation(fields: [bridgeId], references: [id], onDelete: Cascade)

    @@map("bridge_logs")
}

model ApiRequest {
    id           String   @id @default(uuid()) @db.Uuid
    bridgeId     String   @db.Uuid
    endpointId   String?  @db.Uuid
    method       String
    path         String
    headers      Json?
    body         Json?
    response     Json?
    statusCode   Int?
    responseTime Int? // in milliseconds
    success      Boolean  @default(false)
    errorMessage String?
    createdAt    DateTime @default(now())

    // Relations
    bridge   Bridge       @relation(fields: [bridgeId], references: [id], onDelete: Cascade)
    endpoint ApiEndpoint? @relation(fields: [endpointId], references: [id], onDelete: SetNull)

    @@map("api_requests")
}
