services:
  # Main Next.js application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mcp-bridge-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/mcp_bridge
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=mcp_bridge
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - NEXTAUTH_SECRET=your-secret-key-change-this
      - NEXTAUTH_URL=http://localhost:3000
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src
      - ./public:/app/public
      - ./docs:/app/docs
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      - ./next.config.ts:/app/next.config.ts
      - ./tailwind.config.js:/app/tailwind.config.js
      - ./tsconfig.json:/app/tsconfig.json
      - ./postcss.config.mjs:/app/postcss.config.mjs
      # Exclude node_modules to prevent conflicts
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mcp-bridge-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        npx prisma db push &&
        echo 'Database schema synchronized' &&
        npm run dev
      "

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: mcp-bridge-db
    environment:
      - POSTGRES_DB=mcp_bridge
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - mcp-bridge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mcp_bridge"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: mcp-bridge-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-bridge-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin for database management (optional, for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mcp-bridge-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@mcp-bridge.local
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - db
    networks:
      - mcp-bridge-network
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  mcp-bridge-network:
    driver: bridge
